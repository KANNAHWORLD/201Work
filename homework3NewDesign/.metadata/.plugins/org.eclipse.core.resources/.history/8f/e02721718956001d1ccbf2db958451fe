package bansalsi_CSCI201_Assignment3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.locks.*;
import java.util.concurrent.*;
import com.google.common.collect.*;
import com.google.gson.Gson;

public class Server {
	public ArrayList<ServerThread> clients;
	ArrayList<CSVSchedule> schedule;
	ArrayList<CSVTrader> traders;
	public static HashMap<String, Company> priceMap;
	public static int currentJobTest = 0;
	public static Lock jobLock = new ReentrantLock();
	public static PeekingIterator<CSVSchedule> PeekingJobIt;
	public static ArrayList<CSVSchedule> unDoneTrades = new ArrayList<CSVSchedule>();
	public static int amountTraders;
	public static int jobAmount;

	public void startServer(int port)
	{
		clients = new ArrayList<ServerThread>();
		this.port = port;
		
		ServerSocket server = null;
		try {
			server = new ServerSocket(port);
		} catch (IOException e) {
			System.out.println("Port not usable.");
			System.exit(0);
		}
		
		schedule = CSVParser.getTextFile("Schedule");
		traders = CSVTraderParser.getTextFile("traders");
		priceMap = JsonProcessor.getPriceData(schedule);
		ExecutorService executor = Executors.newCachedThreadPool();
		
		System.out.println("Listiening on port " + port + ".\nWaiting for traders...");

		for(int i = 0; i < traders.size(); ++i)
		{
			Socket s = null;
			try {
				s = server.accept();
			} catch (IOException e) {
			}
			ServerThread st = new ServerThread(s, traders.size()-i-1, traders.get(i).startBalance, i+1);
			clients.add(i, st);
		
			System.out.println("Connection from: " + s.getInetAddress());
			if(i <  traders.size()-1)
			{
				System.out.println("Waiting for " + (traders.size()-i-1) + " more trader(s)...");
			}
		}
		
		broadcast("All traders have arrived!");
		System.out.println("Starting service.");
		broadcast("Starting service.");
		broadcast("Next");
	
		// now we should begin making all of the threads start running, and try for all of them to get jobs
		PeekingJobIt = Iterators.peekingIterator(schedule.iterator());

		int LastTime = 0;
		ArrayList<ArrayList<Job>> sendingShit = new ArrayList<ArrayList<Job>>();
		for(@SuppressWarnings("unused") CSVTrader x : traders)
		{
			sendingShit.add(new ArrayList<Job>());
		}

		while(PeekingJobIt.hasNext())
		{
			while(PeekingJobIt.peek().time == LastTime)
			{
				int which = 0;
				for(ServerThread x : clients)
				{
					if(x.elapsedTime > LastTime)
					{
						continue;
					}
					else
					{
						which = x.selfID;
					}
				}
				
				ServerThread whichClient = clients.get(which);
				
				while(PeekingJobIt.peek().time == LastTime)
				{
					String tick = PeekingJobIt.peek().ticker;
					float price = priceMap.get(tick).current_price;
					int Amount = (int) (whichClient.balance / price);
					int trdamt = Server.PeekingJobIt.peek().tradeamount;
					
					if(trdamt < 1)
					{
						sendingShit.get(which).add(new Job(tick, price, Server.PeekingJobIt.peek().time, trdamt));
						Server.PeekingJobIt.next();
						whichClient.profit += (price * trdamt * -1);
					}
					else if (Amount >= trdamt)
					{
						sendingShit.get(which).add(new Job(tick, price, Server.PeekingJobIt.peek().time, trdamt));
						Server.PeekingJobIt.next();
						whichClient.balance -= (price * trdamt);
					}
					else
					{
						jobAmount += 1;
						if(jobAmount >= amountTraders)
						{
							unDoneTrades.add(PeekingJobIt.peek());
							jobAmount = 0;
							PeekingJobIt.next();
						}
						break;
					}
				}
				if(PeekingJobIt.peek().time > LastTime)
				{
					LastTime += 1;
				}
				whichClient.elapsedTime = LastTime + 1;
				}
			}
	
		
		for(int i = 0; i < clients.size(); ++i)
		{
			clients.get(i).jobs = sendingShit.get(i);
		}
		
		
		
		for(ServerThread x : clients)
		{
			executor.execute(x);
		}

		executor.shutdown();
		
		while(!executor.isTerminated())
		{
			Thread.yield();
		}
		
		System.out.println("Processing Complete");
	}
	
	public static void main(String [] args)
	{
		Server s = new Server();
		s.startServer(3456);
		
	}
	
	public void broadcast(String s)
	{
		for (ServerThread x : clients)
		{
			x.printToSocket(s);
		}
	}
	
	int port;
}

class ServerThread extends Thread{
	public BufferedReader inputStream;
	public PrintStream outPutStream;
	public Socket socket;
	double initbalance;
	double balance;
	double profit = 0;
	int selfID = 0;
	int elapsedTime = 0;
	public ArrayList<Job> jobs = new ArrayList<Job>();
	
	public ServerThread(Socket s, int i, int balance, int selfID) {
		this.selfID = selfID;
		this.socket = s;
		this.balance = balance;
		this.initbalance = balance;
		
		try {
			// to do --> store them somewhere, you will need them later 
			inputStream = new BufferedReader(new InputStreamReader(s.getInputStream()));
			outPutStream = new PrintStream(new BufferedOutputStream(s.getOutputStream()));
			
		} catch (IOException ioe) {
			System.out.println("ioe in ServerThread constructor: " + ioe.getMessage());
		}
		this.initbalance = balance;
		if(i != 0)
		{
			outPutStream.println(i + " more trader is needed before the service can begin.");
			outPutStream.flush();
		}
	}

	public void printToSocket(String printString)
	{
		outPutStream.println(printString);
		outPutStream.flush();
	}
	
	public void run()
	{
		buyAndSell();
	}
	
	public void buyAndSell()
	{
		printToSocket("Start");
		Gson gson = new Gson();
		printToSocket(gson.toJson(jobs));

		
//		if(response.equals(done))
//		{
			sObj send2 = new sObj();
			send2.list = new ArrayList<Job>();
			for(CSVSchedule x : Server.unDoneTrades)
			{
				send2.list.add(new Job(x.ticker, Server.priceMap.get(x.ticker).current_price, x.time, x.tradeamount));
			}
			if(!send2.list.isEmpty())
			{
				printToSocket(gson.toJson(send2));
			}
			else 
			{
				printToSocket("None");
			}
//		}
		
		////////// FIX ROUNDING EVREYWHERE
		printToSocket("" + profit + "");
	}
}

class Job
{
	public Job() {}
	Job(String t, double p, int ttim, int tdamt)
	{
		this.tick = t;
		this.price = p;
		this.time = ttim;
		this.tdamt = tdamt;
	}
	public int tdamt;
	String tick;
	double price;
	int time;
}

