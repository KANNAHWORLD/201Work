package lab5;

import java.util.ArrayList;
import java.util.Random;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.lang.Math;



public class RandomNumberGenerator {

	RandomNumberGenerator()
	{
		Random rand = new Random();
		randomNumbers = new ArrayList<Integer>();
		for(int i = 0; i < 100000000; ++i)
		{
			randomNumbers.add(Math.abs(rand.nextInt()%100000000));
		}
		
		notInArrayTarget = 100000001;
		target = randomNumbers.get(Math.abs((rand.nextInt()%100000000)));
	}
	
	public static ArrayList<Integer> randomNumbers;
	public static Integer target;
	public static int notInArrayTarget;
}


class Sequential
{
	void Run()
	{
		int i = 0;
		for(Integer x : RandomNumberGenerator.randomNumbers)
		{
			if(x == RandomNumberGenerator.target)
			{
				System.out.println("Found number at index " + i + " at time " +
						(System.currentTimeMillis()-Main.start));
			}
			++i;
		}
		
		i = 0;
		Main.start = System.currentTimeMillis();
		for(Integer x : RandomNumberGenerator.randomNumbers)
		{
			if(x == RandomNumberGenerator.notInArrayTarget)
			{
//				System.out.println("Found number at index " + i + " at time " +
//						(System.currentTimeMillis()-Main.start));
			}
			++i;
		}
		System.out.println(""
				+ "Target Number not found in array, time taken " + 
				(System.currentTimeMillis()-Main.start));
	}
}

class multiThread extends Thread
{
	public multiThread() {}
	
	public multiThread(int x, int y)
	{
		this.x = x;
		this.y = y;
	}
	
	public void runThisClass()
	{
		Thread t1 = new multiThread(0, 24999999);
		Thread t2 = new multiThread(24999999,49999999);
		Thread t3 = new multiThread(50000000,74999999);
		Thread t4 = new multiThread(75000000, 100000000);
		
		ExecutorService ES = Executors.newFixedThreadPool(4);
		int max = 0;
		
		ES.submit(t1);
		ES.submit(t2);
		ES.submit(t3);
		ES.submit(t4);
		
		ES.shutdown();
		
		while(!ES.isTerminated())
		{
			Thread.yield();
		}
	}
	
	public void run()
	{
		int i = x;
		while (i <=y && (!found))
		{
			if(RandomNumberGenerator.target == RandomNumberGenerator.randomNumbers.get(i))
			{
				System.out.println("Found number at index " + i + " Total time taken" +
									(System.currentTimeMillis() - Main.start));
				found = true;
				return;
			}
			++i;
		}
	}
	
	public static synchronized void UpdateArraylist(int i)
	{
		results.add(i);
	}
	
	
	int x;
	int y;
	static boolean found = false;
}

class multiProcess 
{
	public void run()
	{
		System.out.println("Hello");
	}
}





