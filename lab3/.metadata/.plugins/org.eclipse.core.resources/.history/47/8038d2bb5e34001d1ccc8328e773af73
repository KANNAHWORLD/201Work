package Lab3;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Messenger extends Thread
{
	Messenger(MessageQueue MQ)
	{
		this.MQ = MQ;
		rand = new Random();
	}
	
	public void run()
	{
		for(int i = 0; i < 20; ++i)
		{
			MQ.addMessage("Message" + i);
			System.out.println(Util.getCurrentTime() + " Messenger - insert Message #" + i);
			try {
				sleep(rand.nextInt(1000));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	Random rand;
	MessageQueue MQ;
}

class Subscriber extends Thread
{
	Subscriber(MessageQueue MQ)
	{
		this.MQ = MQ;
		rand = new Random();
	}
	
	public void run()
	{
		for(int i = 0; i < 20; ++i)
		{
			String a = MQ.getMessage();
			if( a == "")
			{
				--i;
				System.out.println(Util.getCurrentTime() + " Message not read");
			}
			else
			{
				System.out.println(Util.getCurrentTime() + " Subscriber - Read Message #" + i );
			}
			try {
				sleep(rand.nextInt(1000));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	Random rand;
	
	MessageQueue MQ;
}
